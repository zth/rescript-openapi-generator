// Generated by ReScript, PLEASE EDIT WITH CARE

import Ava from "ava";
import * as Stdlib_Option from "rescript/lib/es6/Stdlib_Option.js";
import * as OpenApiGenerator from "../src/OpenApiGenerator.res.mjs";

Ava("should parse petstore schemas", async t => {
  let msg = OpenApiGenerator.generateTypes("{\n    \"openapi\": \"3.0.4\",\n    \"info\": {\n      \"title\": \"Test API\",\n      \"version\": \"1.0.0\"\n    },\n    \"components\": {\n      \"schemas\": {\n        \"Category\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"PetStatus\": {\n          \"type\": \"string\",\n          \"enum\": [\"available\", \"pending\", \"sold\"]\n        },\n        \"Pet\": {\n          \"type\": \"object\",\n          \"required\": [\"name\", \"photoUrls\"],\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            },\n            \"category\": {\n              \"$ref\": \"#/components/schemas/Category\"\n            },\n            \"photoUrls\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"status\": {\n              \"$ref\": \"#/components/schemas/PetStatus\"\n            }\n          }\n        }\n      }\n    }\n  }");
  if (msg.TAG !== "Ok") {
    return t.fail("Generation failed: " + msg._0);
  }
  let types = msg._0;
  t.is(types.length, 3);
  let typeNames = types.map(param => param.name);
  t.is(typeNames.includes("Category"), true);
  t.is(typeNames.includes("PetStatus"), true);
  t.is(typeNames.includes("Pet"), true);
});

Ava("should parse simple object schema", t => {
  let msg = OpenApiGenerator.generateTypes("{\n    \"openapi\": \"3.0.4\",\n    \"info\": {\"title\": \"Test\", \"version\": \"1.0.0\"},\n    \"components\": {\n      \"schemas\": {\n        \"SimpleObject\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": {\"type\": \"string\"},\n            \"age\": {\"type\": \"integer\"}\n          },\n          \"required\": [\"name\"]\n        }\n      }\n    }\n  }");
  if (msg.TAG !== "Ok") {
    return t.fail("Generation failed: " + msg._0);
  }
  let types = msg._0;
  t.is(types.length, 1);
  let generatedType = Stdlib_Option.getOrThrow(types[0], undefined);
  t.is(generatedType.name, "SimpleObject");
  t.is(generatedType.definition.includes("name:"), true);
  t.is(generatedType.definition.includes("age?:"), true);
});

Ava("should parse enum schema", t => {
  let msg = OpenApiGenerator.generateTypes("{\n    \"openapi\": \"3.0.4\", \n    \"info\": {\"title\": \"Test\", \"version\": \"1.0.0\"},\n    \"components\": {\n      \"schemas\": {\n        \"Status\": {\n          \"type\": \"string\",\n          \"enum\": [\"active\", \"inactive\", \"pending\"]\n        }\n      }\n    }\n  }");
  if (msg.TAG !== "Ok") {
    return t.fail("Generation failed: " + msg._0);
  }
  let types = msg._0;
  t.is(types.length, 1);
  let generatedType = Stdlib_Option.getOrThrow(types[0], undefined);
  t.is(generatedType.name, "Status");
  t.is(generatedType.definition.includes("Active"), true);
  t.is(generatedType.definition.includes("Inactive"), true);
  t.is(generatedType.definition.includes("Pending"), true);
});

Ava("should handle empty components", t => {
  let types = OpenApiGenerator.generateTypes("{\n    \"openapi\": \"3.0.4\",\n    \"info\": {\"title\": \"Test\", \"version\": \"1.0.0\"},\n    \"components\": {}\n  }");
  if (types.TAG !== "Ok") {
    return t.fail("Should handle empty components");
  }
  t.is(types._0.length, 0);
});

Ava("should generate complete module", t => {
  let msg = OpenApiGenerator.generateModule("{\n    \"openapi\": \"3.0.4\",\n    \"info\": {\"title\": \"Test\", \"version\": \"1.0.0\"},\n    \"components\": {\n      \"schemas\": {\n        \"User\": {\n          \"type\": \"object\", \n          \"properties\": {\n            \"id\": {\"type\": \"integer\"},\n            \"name\": {\"type\": \"string\"}\n          },\n          \"required\": [\"id\"]\n        }\n      }\n    }\n  }");
  if (msg.TAG !== "Ok") {
    return t.fail("Module generation failed: " + msg._0);
  }
  let moduleCode = msg._0;
  t.is(moduleCode.includes("Generated ReScript types"), true);
  t.is(moduleCode.includes("type user"), true);
  t.is(moduleCode.includes("id:"), true);
  t.is(moduleCode.includes("name?:"), true);
});

/*  Not a pure module */
