// Generated by ReScript, PLEASE EDIT WITH CARE

import Ava from "ava";
import * as OpenApiGenerator from "../src/OpenApiGenerator.res.mjs";

Ava("should generate complete petstore module", async t => {
  let msg = OpenApiGenerator.generateModule("{\n    \"openapi\": \"3.0.4\",\n    \"info\": {\n      \"title\": \"Test API\",\n      \"version\": \"1.0.0\"\n    },\n    \"components\": {\n      \"schemas\": {\n        \"Category\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"PetStatus\": {\n          \"type\": \"string\",\n          \"enum\": [\"available\", \"pending\", \"sold\"]\n        },\n        \"Pet\": {\n          \"type\": \"object\",\n          \"required\": [\"name\", \"photoUrls\"],\n          \"properties\": {\n            \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"name\": {\n              \"type\": \"string\"\n            },\n            \"category\": {\n              \"$ref\": \"#/components/schemas/Category\"\n            },\n            \"photoUrls\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"status\": {\n              \"$ref\": \"#/components/schemas/PetStatus\"\n            }\n          }\n        }\n      }\n    }\n  }");
  if (msg.TAG !== "Ok") {
    return t.fail("Generation failed: " + msg._0);
  }
  t.is(msg._0, "// Generated ReScript types from OpenAPI specification\n\ntype category = {\n  id?: int,\n  name?: string,\n}\n\ntype petStatus = | @as(\"available\") Available | @as(\"pending\") Pending | @as(\"sold\") Sold\n\ntype pet = {\n  name: string,\n  photoUrls: array<string>,\n  category?: category,\n  id?: int,\n  status?: petStatus,\n}");
});

Ava("should generate complete simple object module", t => {
  let msg = OpenApiGenerator.generateModule("{\n    \"openapi\": \"3.0.4\",\n    \"info\": {\"title\": \"Test\", \"version\": \"1.0.0\"},\n    \"components\": {\n      \"schemas\": {\n        \"SimpleObject\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": {\"type\": \"string\"},\n            \"age\": {\"type\": \"integer\"}\n          },\n          \"required\": [\"name\"]\n        }\n      }\n    }\n  }");
  if (msg.TAG !== "Ok") {
    return t.fail("Generation failed: " + msg._0);
  }
  t.is(msg._0, "// Generated ReScript types from OpenAPI specification\n\ntype simpleObject = {\n  name: string,\n  age?: int,\n}");
});

Ava("should generate complete enum module", t => {
  let msg = OpenApiGenerator.generateModule("{\n    \"openapi\": \"3.0.4\", \n    \"info\": {\"title\": \"Test\", \"version\": \"1.0.0\"},\n    \"components\": {\n      \"schemas\": {\n        \"Status\": {\n          \"type\": \"string\",\n          \"enum\": [\"active\", \"inactive\", \"pending\"]\n        }\n      }\n    }\n  }");
  if (msg.TAG !== "Ok") {
    return t.fail("Generation failed: " + msg._0);
  }
  t.is(msg._0, "// Generated ReScript types from OpenAPI specification\n\ntype status = | @as(\"active\") Active | @as(\"inactive\") Inactive | @as(\"pending\") Pending");
});

Ava("should handle empty components", t => {
  let moduleCode = OpenApiGenerator.generateModule("{\n    \"openapi\": \"3.0.4\",\n    \"info\": {\"title\": \"Test\", \"version\": \"1.0.0\"},\n    \"components\": {}\n  }");
  if (moduleCode.TAG !== "Ok") {
    return t.fail("Should handle empty components");
  }
  t.is(moduleCode._0, "// Generated ReScript types from OpenAPI specification\n\n");
});

Ava("should generate complex module with inline enums", t => {
  let msg = OpenApiGenerator.generateModule("{\n    \"openapi\": \"3.0.4\",\n    \"info\": {\"title\": \"Test\", \"version\": \"1.0.0\"},\n    \"components\": {\n      \"schemas\": {\n        \"User\": {\n          \"type\": \"object\", \n          \"properties\": {\n            \"id\": {\"type\": \"integer\"},\n            \"name\": {\"type\": \"string\"},\n            \"role\": {\n              \"type\": \"string\",\n              \"enum\": [\"admin\", \"user\", \"guest\"]\n            },\n            \"preferences\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"theme\": {\n                  \"type\": \"string\",\n                  \"enum\": [\"light\", \"dark\"]\n                },\n                \"notifications\": {\"type\": \"boolean\"}\n              }\n            }\n          },\n          \"required\": [\"id\", \"name\"]\n        }\n      }\n    }\n  }");
  if (msg.TAG !== "Ok") {
    return t.fail("Module generation failed: " + msg._0);
  }
  t.is(msg._0, "// Generated ReScript types from OpenAPI specification\n\ntype userRole = | @as(\"admin\") Admin | @as(\"user\") User | @as(\"guest\") Guest\n\ntype user = {\n  id: int,\n  name: string,\n  preferences?: unknown,\n  role?: userRole,\n}");
});

/*  Not a pure module */
